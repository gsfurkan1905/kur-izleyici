# -*- coding: utf-8 -*-
# dosya adÄ±: kur_izleyici.py (Hisse Senedi SÃ¼rÃ¼mÃ¼)

"""
Bu betik, bir sunucu tarafÄ±ndan "ZamanlanmÄ±ÅŸ GÃ¶rev" olarak
Ã§alÄ±ÅŸtÄ±rÄ±lmak Ã¼zere tasarlanmÄ±ÅŸtÄ±r.

Alpha Vantage API'sini kullanarak bir hisse senedinin (KOCHL)
fiyatÄ±nÄ± BÄ°R KEZ kontrol eder ve hedef fiyata ulaÅŸÄ±lmÄ±ÅŸsa
Telegram Ã¼zerinden bildirim gÃ¶nderir.
"""

import requests
import json
import time
import os  # Secrets (gizli bilgiler) okumak iÃ§in

# --- YAPIÅžTIRILACAK ALAN: GÄ°ZLÄ° BÄ°LGÄ°LERÄ° OKUMA ---
try:
    # Telegram bilgileri
    TELEGRAM_BOT_TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
    TELEGRAM_CHAT_ID = os.environ['TELEGRAM_CHAT_ID']
    
    # Yeni Finans API AnahtarÄ±
    API_KEY = os.environ['ALPHA_VANTAGE_API_KEY']
    
except KeyError as e:
    print(f"HATA: Gizli bilgi (Secret) bulunamadÄ±: {e}")
    print("LÃ¼tfen GitHub Repository Secrets ayarlarÄ±nÄ± kontrol edin.")
    print("Gerekenler: TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, ALPHA_VANTAGE_API_KEY")
    exit(1) # Hata varsa programdan Ã§Ä±k


# --- YAPIlandÄ±rma: HÄ°SSE SENEDÄ° VE HEDEF ---

# Takip edilecek hisse senedinin BIST sembolÃ¼
# Alpha Vantage, BIST hisseleri iÃ§in ".IS" son ekini kullanÄ±r.
HISSE_SEMBOLU = "KOCHL.IS"

# AlarmÄ±n Ã§alacaÄŸÄ± fiyat (Bu satÄ±rÄ± kendi hedefinizle deÄŸiÅŸtirin)
HEDEF_FIYAT = 152.0  # Ã–RNEK: 152.0 TL

# FiyatÄ±n para birimi (Sadece mesajlaÅŸma iÃ§in)
PARA_BIRIMI = "TRY"
# -----------------------------------------------


def gonder_telegram_bildirimi(token, chat_id, mesaj):
    """
    Telegram API'sine 'requests' ile bildirim gÃ¶nderir.
    (Bu fonksiyon kur izleyici ile aynÄ±)
    """
    telegram_api_url = f"https://api.telegram.org/bot{token}/sendMessage"
    params = {'chat_id': chat_id, 'text': mesaj}
    
    print("Telegram'a bildirim gÃ¶nderiliyor...")
    try:
        # Timeout sÃ¼resini 30 saniyeye Ã§Ä±kardÄ±m
        response = requests.get(telegram_api_url, params=params, timeout=30)
        response.raise_for_status() 
        print("Bildirim baÅŸarÄ±yla gÃ¶nderildi.")
    except requests.exceptions.RequestException as e:
        print(f"Telegram'a baÄŸlanÄ±rken HATA oluÅŸtu: {e}")

def fiyati_kontrol_et():
    """
    Ana program mantÄ±ÄŸÄ±. Hisse fiyatÄ±nÄ± BÄ°R KEZ kontrol eder.
    """
    print("--- Hisse Senedi Fiyat KontrolÃ¼ BaÅŸlatÄ±ldÄ± ---")
    
    # Alpha Vantage API'sinden anlÄ±k fiyatÄ± Ã§ek ("GLOBAL_QUOTE" fonksiyonu)
    api_url = (
        f"https://www.alphavantage.co/query"
        f"?function=GLOBAL_QUOTE"
        f"&symbol={HISSE_SEMBOLU}"
        f"&apikey={API_KEY}"
    )
    
    print(f"Veri Ã§ekiliyor: {HISSE_SEMBOLU}")

    try:
        # Timeout sÃ¼resini 30 saniyeye Ã§Ä±kardÄ±m
        response = requests.get(api_url, timeout=30)
        response.raise_for_status()
        veri_sozluk = response.json() 

        # API Hata KontrolÃ¼ (Ã–rn: API limitine ulaÅŸÄ±ldÄ±ysa)
        if "Note" in veri_sozluk:
            print(f"HATA: Alpha Vantage API Limiti: {veri_sozluk['Note']}")
            print("API Ã¼cretsiz katmanÄ± 25 istek/gÃ¼n limitine sahip olabilir, YAML'daki cron sÃ¼resini artÄ±rÄ±n.")
            return

        # Gelen JSON verisini iÅŸle
        # YanÄ±t formatÄ±: {"Global Quote": {"05. price": "215.50", ...}}
        global_quote = veri_sozluk.get("Global Quote")
        if not global_quote:
            print(f"HATA: API yanÄ±tÄ±nda 'Global Quote' bulunamadÄ±.")
            print(f"YanÄ±t: {veri_sozluk}")
            return

        mevcut_fiyat_str = global_quote.get("05. price")
        if mevcut_fiyat_str is None:
            print(f"HATA: YanÄ±tta '05. price' (fiyat bilgisi) bulunamadÄ±.")
            return

        # Fiyat bilgisi metin ("215.50") olarak gelir, sayÄ±ya (float) Ã§evir
        mevcut_fiyat = float(mevcut_fiyat_str)

        zaman_damgasi = time.ctime() 
        print(f"[{zaman_damgasi}] Kontrol: {HISSE_SEMBOLU} = {mevcut_fiyat:.2f} {PARA_BIRIMI}")

        # HEDEF KONTROLÃœ
        if mevcut_fiyat >= HEDEF_FIYAT:
            print("!!! HEDEF YAKALANDI !!!")
            alarm_mesaji = (
                f"ðŸš¨ HÄ°SSE ALARMI! ðŸš¨\n\n"
                f"Hedef YakalandÄ±: {HISSE_SEMBOLU} >= {HEDEF_FIYAT} {PARA_BIRIMI}\n\n"
                f"ðŸ”¥ MEVCUT FÄ°YAT: {mevcut_fiyat:.2f} {PARA_BIRIMI}"
            )
            gonder_telegram_bildirimi(TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, alarm_mesaji)
        else:
            print(f"Hedef henÃ¼z yakalanmadÄ± (Hedef: {HEDEF_FIYAT} {PARA_BIRIMI})")
            
    except requests.exceptions.RequestException as e:
        print(f"Hisse verisi Ã§ekilirken HATA OLUÅžTU: {e}")
    except ValueError:
        print(f"HATA: Gelen fiyat ('{mevcut_fiyat_str}') sayÄ±ya dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lemedi.")
    except Exception as e:
        print(f"Beklenmedik bir hata oluÅŸtu: {e}")
    
    print("--- Kontrol TamamlandÄ± ---")

# --- ProgramÄ±n BaÅŸlangÄ±Ã§ NoktasÄ± ---
if __name__ == "__main__":
    fiyati_kontrol_et()
